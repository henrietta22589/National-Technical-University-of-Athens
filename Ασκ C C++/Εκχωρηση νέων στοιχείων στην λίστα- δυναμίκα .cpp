/*Δημιουργία μιας απλής λίστας απλά συνδεδεμένης και εκχωρήση ενός νέου στοιχείου στην λίστα , εστω η προυπαρχων λίστα μας ειναι {5,8,9}*/
#include<iostream>
using namespace std;
struct pass 
    int info;
    pass*next;
};
/*Δημιουργία συναρτήσεων */
void insert (pass*&head,int value)
{
    /*Πάμε να δημιουργήσουμε εναν νέο κόμβο, στον οποίο θα βαλούμε την νέα μας τιμή */
    pass *newNode = new pass; /*Εδώ φτιάχνουμε έναν νέο δεικτή ο οποίος ειναι συνδεδεμένος με την λίστα μας pass και ουσιαστικα μεσω του new ειναι σαν να 
    φρεσκάρουμε, ανανεώνουμε την λίστα μας. */
    /*Εδώ δίνουμε την δυνατότητα δυναμίκης εκχωρησης μίας τιμής στον νέο κόμβο */
    newNode->info = value;
    /*Εδω προκείμενού ο κόμβος αυτός να ειναι ο πρώτος, δειχνούμε το head (της προυπαρχούσας λίστας)*/
    newNode ->next = head;
    /*Τέλος εδώ πλέον ο head της λίστας μας θα πρέπε να ειναι ο καινουργιος κόμβος επομένως θα πούμε */
    head=newNode;
}
/*Τωρα για να ανατρεξούμε όλα τα στοιχεία της λίστας όπως ειπάμε και σε προηγούμενη Ασκήση, πρεπει να φτιαξούμε εναν νέο δεικτή ο οποίος θα δειχνει στην αρχή τον 
header */
void printTheList(pass *head)
{
    /*Δημιουργία του νέου δείκτη */
    pass *read_all_the_list;
    /*Ο Δείκτης δείχνει πλέον στον head*/
    read_all_the_list = head;
    /*Οσό ο δείκτης δεν βρίσκει null τιμή (δηλαδή όσο δεν τελείωνει η λίστα */
    while (read_all_the_list != nullptr)
    {
        /*Εμφανίσε το περιεχόμενο των κόμβων της λίστας */
        cout<<endl<<read_all_the_list->info;
        /*Συνεχίσε να διαβάζεις τα στοιχεία της λίστας */
        read_all_the_list = read_all_the_list->next;
    }
}
int main()
{
    Node* head = nullptr;  // αρχικά η λίστα είναι άδεια (δείχνει σε nullptr)

    // Βάζουμε στοιχεία στην αρχή
    insertAtFront(head, 5);  // λίστα: 5
    insertAtFront(head, 8);  // λίστα: 8 -> 5
    insertAtFront(head, 9);  // λίστα: 9 -> 8 -> 5

    // Εμφάνιση λίστας
    cout << "Η λίστα είναι: ";
    printList(head);

    
    return 0;
}